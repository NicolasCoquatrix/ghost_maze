##### GHOST MAZE #####

# Ghost Maze est un jeu créé durant mon parcours de formation en développement Web et Web mobile.

# La version 2.1.2 est une version de démonstration qui explique le fonctionnement de la version 2.1.0.


## IMPORTATIONS ##
import os #os.system("cls")
import time #time.sleep()
import msvcrt #msvcrt.getch()


## DÉFINITION DES FONCTIONS DE BASE ##
def get_user_input() :
    while True :
        if msvcrt.kbhit() :
            try:
                keyboard_key = msvcrt.getch()
                # Touche 'Entrée' :
                if keyboard_key == b'\r':
                    return "Confirmer"
                # Touche 'Échap' :
                elif keyboard_key == b'\x1b':
                    return "Quitter"
                # Touche 'Retour arrière' :
                elif keyboard_key == b'\x08':
                    return "Recommencer"
                # Touche 'Tab' :
                elif keyboard_key == b'\t':
                    return "Auto"
                # Touches directionnelles :
                elif keyboard_key == b'\xe0':
                    arrow_key = msvcrt.getch()
                    # Flèche du haut :
                    if arrow_key == b'H':
                        return "Haut"
                    # Flèche du bas :
                    elif arrow_key == b'P':
                        return "Bas"
                    # Flèche de gauche :
                    elif arrow_key == b'K':
                        return "Gauche"
                    # Flèche de droite :
                    elif arrow_key == b'M':
                        return "Droite"
                else:
                    return keyboard_key.decode('utf-8').lower()
            except UnicodeDecodeError :
                pass


## GESTION DU REPLAY ##
game_number = 0
keyboard_key = "Confirmer"
while keyboard_key == "Confirmer" or keyboard_key == "Recommencer" :
    game_number += 1


    ## DÉFINITION DE L'ECRAN DU JEU ##
    game_screen_head_game_name = "╭" + "─"*94 + "╮\n│ ⨂" + " "*89 + "⨂  │\n│" + " "*34 + "🅖  🅞  🅢  🅣      🅜  🅐  🅩  🅔" + " "*34+ "│\n│" + " "*94 + "│\n│" + " "*37 + "╭" + "─"*18 + "╮" + " "*37 + "│\n│" + " "*37 + "│  VOIR LE TUTO ?  │" + " "*37 + "│\n│" + " "*37 + "│ ►  ↵  ◄  ►  X  ◄ │" + " "*37 + "│\n│" + " "*37 + "╰" + "─"*18 + "╯" + " "*37 + "│"
    game_screen_head_tuto = "╭" + "─"*94 + "╮\n│ ⨂" + " "*89 + "⨂  │\n│" + " "*34 + "🅖  🅞  🅢  🅣      🅜  🅐  🅩  🅔" + " "*34+ "│\n│" + " "*94 + "│\n│" + " "*37 + "╭" + "─"*18 + "╮" + " "*37 + "│\n│" + " "*37 + "│  PRÊT À JOUER ?  │" + " "*37 + "│\n│" + " "*37 + "│     ►  ↵  ◄      │" + " "*37 + "│\n│" + " "*37 + "╰" + "─"*18 + "╯" + " "*37 + "│"
    game_screen_head_before_score = "╭" + "─"*94 + "╮\n│ ⨂" + " "*89 + "⨂  │\n│" + " "*34 + "🅖  🅞  🅢  🅣      🅜  🅐  🅩  🅔" + " "*34+ "│\n│" + " "*94 + "│\n│" + " "*37 + "╭" + "─"*18 + "╮" + " "*37 + "│\n│" + " "*37 + "│ CLÉS  RÉCUPÉRÉES │" + " "*37 + "│\n│" + " "*37 + "│" + " "*3 + "⬪ "
    game_screen_head_after_score = " // 20 ⬪" + " "*3 + "│" + " "*37 + "│\n│" + " "*37 + "╰" + "─"*18 + "╯" + " "*37 + "│"
    game_screen_foot = "│ ⨂" + " "*89 + "⨂  │\n╰" + "─"*94 + "╯"
    game_screen_head_win = "╭" + "─"*94 + "╮\n│ ⨂" + " "*89 + "⨂  │\n│" + " "*34 + "🅖  🅞  🅢  🅣      🅜  🅐  🅩  🅔" + " "*34+ "│\n│" + " "*94 + "│\n│" + " "*37 + "╭" + "─"*18 + "╮" + " "*37 + "│\n│" + " "*37 + "│    REJOUER ??    │" + " "*37 + "│\n│" + " "*37 + "│ ►  ↵  ◄  ►  X  ◄ │" + " "*37 + "│\n│" + " "*37 + "╰" + "─"*18 + "╯" + " "*37 + "│"
    game_screen_head_thanks = "╭" + "─"*94 + "╮\n│ ⨂" + " "*89 + "⨂  │\n│" + " "*34 + "🅖  🅞  🅢  🅣      🅜  🅐  🅩  🅔" + " "*34+ "│\n│" + " "*94 + "│\n│" + " "*37 + "╭" + "─"*18 + "╮" + " "*37 + "│\n│" + " "*37 + "│  MERCI BEAUCOUP  │" + " "*37 + "│\n│" + " "*37 + "│   D'AVOIR JOUÉ   │" + " "*37 + "│\n│" + " "*37 + "╰" + "─"*18 + "╯" + " "*37 + "│"


    ## DÉFINITION DE L'ECRAN D'ACCEUIL, DU TUTO, DE VICTOIRE ET DES COMMANDES ##
    game_name = [["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
                 ["   "," ╔═","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═╕ "," ╒═","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═╗ ","   "],
                 ["   "," ║ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," │ "," │ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," ║ ","   "],
                 ["   "," ║ ","   "," ╭─","───","───","─╮ ","   "," ╭─","───","───","───","─╮ ","   "," │ "," │ ","   "," ╭─","───","───","───","─╮ ","   "," ╭─","───","───","─╮ ","   "," ║ ","   "],
                 ["   "," ║ ","   "," │ ","   ","   "," │ ","   "," │ ","   ","   ","   "," │ ","   "," │ "," │ ","   "," │ ","   ","   ","   "," │ ","   "," │ ","   ","   "," │ ","   "," ║ ","   "],
                 ["   "," ║ ","   "," │ ","   ","   "," ╘═","═══","═╛ ","   ","   ","   "," ╘═","═══","═╛ "," ╘═","═══","═╛ ","   ","   ","   "," ╘═","═══","═╛ ","   ","   "," │ ","   "," ║ ","   "],
                 ["   "," ║ ","   "," │ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," │ ","   "," ║ ","   "],
                 ["   "," ╚═","═══","═╛ ","   ","  "," M "," E "," T "," Z ","   "," N "," U "," M "," E "," R "," I "," C ","   "," S "," C "," H "," O "," O "," L ","    "," ╘═","═══","═╝ ","   "],
                 ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
                 ["   "," ■ "," ■ "," ■ ","   ","   "," ■ ","   ","   ","   "," ■ ","   ","   "," ■ "," ■ "," ■ "," ■ ","   ","   ","   "," ■ "," ■ "," ■ "," ■ ","   "," ■ "," ■ "," ■ "," ■ "," ■ "],
                 [" ■ ","   ","   ","   "," ■ ","   "," ■ ","   ","   ","   "," ■ ","   "," ■ ","   ","   ","   ","   "," ■ ","   "," ■ ","   ","   ","   ","   ","   ","   ","   "," ■ ","   ","   "],
                 [" ■ ","   ","   ","   ","   ","   "," ■ ","   ","   ","   "," ■ ","   "," ■ ","   ","   ","   ","   "," ■ ","   "," ■ ","   ","   ","   ","   ","   ","   ","   "," ■ ","   ","   "],
                 [" ■ ","   ","   ","   ","   ","   "," ■ "," ■ "," ■ "," ■ "," ■ ","   "," ■ ","   ","   ","   ","   "," ■ ","   ","   "," ■ "," ■ "," ■ ","   ","   ","   ","   "," ■ ","   ","   "],
                 [" ■ ","   ","   "," ■ "," ■ ","   "," ■ ","   ","   ","   "," ■ ","   "," ■ ","   ","   ","   ","   "," ■ ","   ","   ","   ","   ","   "," ■ ","   ","   ","   "," ■ ","   ","   "],
                 [" ■ ","   ","   ","   "," ■ ","   "," ■ ","   ","   ","   "," ■ ","   "," ■ ","   ","   ","   ","   "," ■ ","   ","   ","   ","   ","   "," ■ ","   ","   ","   "," ■ ","   ","   "],
                 ["   "," ■ "," ■ "," ■ ","   ","   "," ■ ","   ","   ","   "," ■ ","   ","   "," ■ "," ■ "," ■ "," ■ ","   ","   "," ■ "," ■ "," ■ "," ■ ","   ","   ","   ","   "," ■ ","   ","   "],
                 ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
                 ["   ","   ","   "," ■ ","   ","   ","   "," ■ ","    ","   "," ■ "," ■ "," ■ ","   ","    "," ■ "," ■ "," ■ "," ■ "," ■ ","    "," ■ "," ■ "," ■ "," ■ "," ■ ","   ","   ","   ",""],
                 ["   ","   ","   "," ■ "," ■ ","   "," ■ "," ■ ","    "," ■ ","   ","   ","   "," ■ ","    ","   ","   ","   ","   "," ■ ","    "," ■ ","   ","   ","   ","   ","   ","   ","   ",""],
                 ["   ","   ","   "," ■ ","   "," ■ ","   "," ■ ","    "," ■ ","   ","   ","   "," ■ ","    ","   ","   ","   "," ■ ","   ","    "," ■ ","   ","   ","   ","   ","   ","   ","   ",""],
                 ["   ","   ","   "," ■ ","   "," ■ ","   "," ■ ","    "," ■ "," ■ "," ■ "," ■ "," ■ ","    ","   ","   "," ■ ","   ","   ","    "," ■ "," ■ "," ■ "," ■ ","   ","   ","   ","   ",""],
                 ["   ","   ","   "," ■ ","   ","   ","   "," ■ ","    "," ■ ","   ","   ","   "," ■ ","    ","   "," ■ ","   ","   ","   ","    "," ■ ","   ","   ","   ","   ","   ","   ","   ",""],
                 ["   ","   ","   "," ■ ","   ","   ","   "," ■ ","    "," ■ ","   ","   ","   "," ■ ","    "," ■ ","   ","   ","   ","   ","    "," ■ ","   ","   ","   ","   ","   ","   ","   ",""],
                 ["   ","   ","   "," ■ ","   ","   ","   "," ■ ","    "," ■ ","   ","   ","   "," ■ ","    "," ■ "," ■ "," ■ "," ■ "," ■ ","    "," ■ "," ■ "," ■ "," ■ "," ■ ","   ","   ","   ",""],
                 ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
                 ["   ","   ","   "," ╒═","═╗ ","    "," N "," I "," C "," O "," L "," A "," S ","  ","  "," C "," O "," Q "," U "," A "," T "," R "," I "," X ","    "," ╔═","═╕ ","   ","   ","   "],
                 ["   "," ╓─","───","─╯ "," ║ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," ║ "," ╰─","───","─╖ ","   "],
                 ["   "," ║ ","   ","   "," ╚═","═══","═══","═══","═╕ "," ╒═","═══","═══","═══","═══","═╕ "," ╒═","═══","═══","═══","═══","═╕ "," ╒═","═══","═══","═══","═╝ ","   ","   "," ║ ","   "],
                 ["   "," ║ ","   "," ╭─","───","───","───","───","─╯ "," ╰─","───","───","─╮ ","   "," │ "," │ ","   "," ╭─","───","───","─╯ "," ╰─","───","───","───","───","─╮ ","   "," ║ ","   "],
                 ["   "," ║ ","   "," ╰─","───","───","───","───","───","───","───","───","─╯ ","   "," ╰─","─╯ ","   "," ╰─","───","───","───","───","───","───","───","───","─╯ ","   "," ║ ","   "],
                 ["   "," ║ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," ║ ","   "],
                 ["   "," ╚═","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═╝ ","   "],
                 ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "]]

    game_tuto = [["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
                 ["   "," ╔═","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═╕ "," ╒═","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═╗ ","   "],
                 ["   "," ║ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," │ "," │ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," ║ ","   "],
                 ["   "," ║ ","   "," ╭─","───","───","─╮ ","   "," ╭─","───","───","───","─╮ ","   "," │ "," │ ","   "," ╭─","───","───","───","─╮ ","   "," ╭─","───","───","─╮ ","   "," ║ ","   "],
                 ["   "," ║ ","   "," │ ","   ","   "," ╘═","═══","═╛ ","   ","   ","   "," ╘═","═══","═╛ "," ╘═","═══","═╛ ","   ","   ","   "," ╘═","═══","═╛ ","   ","   "," │ ","   "," ║ ","   "],
                 ["   "," ║ ","   "," │ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," │ ","   "," ║ ","   "],
                 ["   "," ║ ","   "," │ ","   ","   "," ╭─","───","───","───","─╮ "," ╭─","───","───","───","───","───","───","───","───","───","───","───","─╮ ","   ","   "," │ ","   "," ║ ","   "],
                 ["   "," ╚═","═══","═╛ ","   ","   "," │ ","   ","   ","   "," │ "," │ Touche 'Entrée' :                 │ ","   ","   "," ╘═","═══","═╝ ","   "],
                 ["   ","   ","   ","   ","   ","   "," │ ","   "," ↵ ","   "," │ "," │ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," │ ","   ","   ","   ","   ","   ","   "],
                 ["   ","   ","   ","   ","   ","   "," │ ","   ","   ","   "," │ "," │ ► Valider                         │ ","   ","   ","   ","   ","   ","   "],
                 ["   ","   ","   ","   ","   ","   "," ╰─","───","───","───","─╯ "," ╰─","───","───","───","───","───","───","───","───","───","───","───","─╯ ","   ","   ","   ","   ","   ","   "],
                 ["   ","   ","   ","   ","   ","   "," ╭─","───","───","───","─╮ "," ╭─","───","───","───","───","───","───","───","───","───","───","───","─╮ ","   ","   ","   ","   ","   ","   "],
                 ["   ","   ","   ","   ","   ","   "," │ ","   ","   ","   "," │ "," │ Touche 'Échap' :                  │ ","   ","   ","   ","   ","   ","   "],
                 ["   ","   ","   ","   ","   ","   "," │ ","   "," X ","   "," │ "," │ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," │ ","   ","   ","   ","   ","   ","   "],
                 ["   ","   ","   ","   ","   ","   "," │ ","   ","   ","   "," │ "," │ ► Quitter                         │ ","   ","   ","   ","   ","   ","   "],
                 ["   ","   ","   ","   ","   ","   "," ╰─","───","───","───","─╯ "," ╰─","───","───","───","───","───","───","───","───","───","───","───","─╯ ","   ","   ","   ","   ","   ","   "],
                 ["   ","   ","   ","   ","   ","   "," ╭─","───","───","───","─╮ "," ╭─","───","───","───","───","───","───","───","───","───","───","───","─╮ ","   ","   ","   ","   ","   ","   "],
                 ["   ","   ","   ","   ","   ","   "," │ ","   ","   ","   "," │ "," │ Touche 'Retour Arrière' :         │ ","   ","   ","   ","   ","   ","   "],
                 ["   ","   ","   ","   ","   ","   "," │ ","   "," ↺ ","   "," │ "," │ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," │ ","   ","   ","   ","   ","   ","   "],
                 ["   ","   ","   ","   ","   ","   "," │ ","   ","   ","   "," │ "," │ ► Recommencer                     │ ","   ","   ","   ","   ","   ","   "],
                 ["   ","   ","   ","   ","   ","   "," ╰─","───","───","───","─╯ "," ╰─","───","───","───","───","───","───","───","───","───","───","───","─╯ ","   ","   ","   ","   ","   ","   "],
                 ["   ","   ","   ","   ","   ","   "," ╭─","───","───","───","─╮ "," ╭─","───","───","───","───","───","───","───","───","───","───","───","─╮ ","   ","   ","   ","   ","   ","   "],
                 ["   ","   ","   ","   ","   ","   "," │ ","   ","   ","   "," │ "," │ Touche 'TAB' :                    │ ","   ","   ","   ","   ","   ","   "],
                 ["   ","   ","   ","   ","   ","   "," │ ","   "," ↝ ","   "," │ "," │ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," │ ","   ","   ","   ","   ","   ","   "],
                 ["   ","   ","   ","   ","   ","   "," │ ","   ","   ","   "," │ "," │ ► Mode automatique                │ ","   ","   ","   ","   ","   ","   "],
                 ["   ","   ","   "," ╒═","═╗ ","   "," ╰─","───","───","───","─╯ "," ╰─","───","───","───","───","───","───","───","───","───","───","───","─╯ ","   "," ╔═","═╕ ","   ","   ","   "],
                 ["   "," ╓─","───","─╯ "," ║ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," ║ "," ╰─","───","─╖ ","   "],
                 ["   "," ║ ","   ","   "," ╚═","═══","═══","═══","═╕ "," ╒═","═══","═══","═══","═══","═╕ "," ╒═","═══","═══","═══","═══","═╕ "," ╒═","═══","═══","═══","═╝ ","   ","   "," ║ ","   "],
                 ["   "," ║ ","   "," ╭─","───","───","───","───","─╯ "," ╰─","───","───","─╮ ","   "," │ "," │ ","   "," ╭─","───","───","─╯ "," ╰─","───","───","───","───","─╮ ","   "," ║ ","   "],
                 ["   "," ║ ","   "," ╰─","───","───","───","───","───","───","───","───","─╯ ","   "," ╰─","─╯ ","   "," ╰─","───","───","───","───","───","───","───","───","─╯ ","   "," ║ ","   "],
                 ["   "," ║ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," ║ ","   "],
                 ["   "," ╚═","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═╝ ","   "],
                 ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "]]

    game_win = [["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
                ["   "," ╔═","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═╕ "," ╒═","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═╗ ","   "],
                ["   "," ║ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," │ "," │ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," ║ ","   "],
                ["   "," ║ ","   "," ╭─","───","───","─╮ ","   "," ╭─","───","───","───","─╮ ","   "," │ "," │ ","   "," ╭─","───","───","───","─╮ ","   "," ╭─","───","───","─╮ ","   "," ║ ","   "],
                ["   "," ║ ","   "," │ ","   ","   "," │ ","   "," │ ","   ","   ","   "," ╘═","═══","═╛ "," ╘═","═══","═╛ ","   ","   ","   "," │ ","   "," │ ","   ","   "," │ ","   "," ║ ","   "],
                ["   "," ║ ","   "," │ ","   ","   "," ╘═","═══","═╛ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," ╘═","═══","═╛ ","   ","   "," │ ","   "," ║ ","   "],
                ["   "," ║ ","   "," │ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," ■ "," ■ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," │ ","   "," ║ ","   "],
                ["   "," ╚═","═══","═╛ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," ■ "," ■ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," ╘═","═══","═╝ ","   "],
                ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," ■ "," ■ "," ■ "," ■ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
                ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," ■ "," ■ "," ■ "," ■ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
                ["   ","   ","   ","   ","   ","   ","   "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ ","   ","   ","   ","   ","   ","   ","   "],
                ["   ","   ","   ","   ","   ","   ","   "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ ","   ","   ","   ","   ","   ","   ","   "],
                ["   ","   ","   ","   ","   ","   ","   ","   "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ ","   ","   ","   ","   ","   ","   ","   ","   "],
                ["   ","   ","   ","   ","   ","   ","   ","   ","   "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
                ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
                ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
                ["   ","   ","   ","   ","   ","   ","   ","   ","   "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ "," ■ ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
                ["   ","   ","   ","   ","   ","   ","   ","   ","   "," ■ "," ■ "," ■ "," ■ "," ■ ","   ","   "," ■ "," ■ "," ■ "," ■ "," ■ ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
                ["   ","   ","   ","   ","   ","   ","   ","   "," ■ "," ■ "," ■ "," ■ "," ■ ","   ","   ","   ","   "," ■ "," ■ "," ■ "," ■ "," ■ ","   ","   ","   ","   ","   ","   ","   ","   "],
                ["   ","   ","   ","   ","   ","   ","   ","   "," ■ "," ■ "," ■ ","   ","   ","   ","   ","   ","   ","   ","   "," ■ "," ■ "," ■ ","   ","   ","   ","   ","   ","   ","   ","   "],
                ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
                ["   ","   ","   "," ■ "," ■ "," ■ ","   ","   "," ■ "," ■ "," ■ ","   ","   ","   "," ■ "," ■ ","   ","   "," ■ ","   ","   "," ■ ","   ","   "," ■ "," ■ ","   ","   ","   ","   "],
                ["   ","   ","   "," ■ ","   ","   "," ■ ","   "," ■ ","   ","   "," ■ ","   "," ■ ","   ","   "," ■ ","   "," ■ ","   ","   "," ■ ","   "," ■ ","   ","   "," ■ ","   ","   ","   "],
                ["   ","   ","   "," ■ "," ■ "," ■ ","   ","   "," ■ "," ■ "," ■ ","   ","   "," ■ "," ■ "," ■ "," ■ ","   "," ■ ","   ","   "," ■ ","   "," ■ ","   ","   "," ■ ","   ","   ","   "],
                ["   ","   ","   "," ■ ","   ","   "," ■ ","   "," ■ ","   "," ■ ","   ","   "," ■ ","   ","   "," ■ ","   ","   "," ■ "," ■ ","   ","   "," ■ ","   ","   "," ■ ","   ","   ","   "],
                ["   ","   ","   "," ■ "," ■ "," ■ ","   ","   "," ■ ","   ","   "," ■ ","   "," ■ ","   ","   "," ■ ","   ","   "," ■ "," ■ ","   ","   ","   "," ■ "," ■ ","   ","   ","   ","   "],
                ["   "," ╓─","─╮ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," ╭─","─╖ ","   "],
                ["   "," ║ "," ╘═","═══","═══","═══","═══","═══","═╕ "," ╒═","═══","═══","═══","═══","═╕ "," ╒═","═══","═══","═══","═══","═╕ "," ╒═","═══","═══","═══","═══","═══","═╛ "," ║ ","   "],
                ["   "," ║ ","   "," ╭─","───","───","───","───","─╯ "," ╰─","───","───","─╮ ","   "," │ "," │ ","   "," ╭─","───","───","─╯ "," ╰─","───","───","───","───","─╮ ","   "," ║ ","   "],
                ["   "," ║ ","   "," ╰─","───","───","───","───","───","───","───","───","─╯ ","   "," ╰─","─╯ ","   "," ╰─","───","───","───","───","───","───","───","───","─╯ ","   "," ║ ","   "],
                ["   "," ║ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," ║ ","   "],
                ["   "," ╚═","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═╝ ","   "],
                ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "]]

    directional_keys = [["   ","   ","   ","   ","   ","   ","   "," ▲ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," ╭─","───","─╮ ","   ","   ","   ","   ","   ","   "],
                        ["   ","   ","   ","   ","   ","   ","   "," Z ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," │ "," ↺ "," │ ","   ","   ","   ","   ","   ","   "],
                        ["   ","   ","   ","   ","   ","   "," ╭─","─┴─","─╮ ","   ","   ","   ","   ","   ","   ","   ","   ","   "," ╭─","───","─╮ "," ╰─","───","─╯ "," ╭─","───","─╮ ","   ","   ","   "],
                        ["   ","   ","   ","   ","  ◄"," Q ","─┤ "," ○ "," ├─"," D ","►  ","   ","   ","   ","   ","   ","   ","   "," │ "," ↵ "," │ ","   ","   ","   "," │ "," X "," │ ","   ","   ","   "],
                        ["   ","   ","   ","   ","   ","   "," ╰─","─┬─","─╯ ","   ","   ","   ","   ","   ","   ","   ","   ","   "," ╰─","───","─╯ "," ╭─","───","─╮ "," ╰─","───","─╯ ","   ","   ","   "],
                        ["   ","   ","   ","   ","   ","   ","   "," S ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," │ "," ↝ "," │ ","   ","   ","   ","   ","   ","   "],
                        ["   ","   ","   ","   ","   ","   ","   "," ▼ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," ╰─","───","─╯ ","   ","   ","   ","   ","   ","   "]]


    ## DÉFINITION DU LABYRINTHE ##
    ghost_maze = [[" V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "],
                  [" V "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," V "],
                  [" V "," W "," R "," R "," R "," R "," R "," R "," R "," R "," K "," R "," R "," R "," W "," W "," R "," R "," R "," K "," R "," R "," R "," R "," R "," R "," R "," R "," W "," V "],
                  [" V "," W "," R "," W "," W "," W "," W "," R "," W "," W "," W "," W "," W "," R "," W "," W "," R "," W "," W "," W "," W "," W "," R "," W "," W "," W "," W "," R "," W "," V "],
                  [" V "," W "," K "," W "," V "," V "," W "," R "," W "," V "," V "," V "," W "," R "," W "," W "," R "," W "," V "," V "," V "," W "," R "," W "," V "," V "," W "," K "," W "," V "],
                  [" V "," W "," R "," W "," W "," W "," W "," R "," W "," W "," W "," W "," W "," R "," W "," W "," R "," W "," W "," W "," W "," W "," R "," W "," W "," W "," W "," R "," W "," V "],
                  [" V "," W "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," W "," V "],
                  [" V "," W "," R "," W "," W "," W "," W "," R "," W "," W "," R "," W "," W "," W "," W "," W "," W "," W "," W "," R "," W "," W "," R "," W "," W "," W "," W "," R "," W "," V "],
                  [" V "," W "," R "," W "," W "," W "," W "," K "," W "," W "," R "," W "," W "," W "," W "," W "," W "," W "," W "," R "," W "," W "," K "," W "," W "," W "," W "," R "," W "," V "],
                  [" V "," W "," R "," R "," R "," R "," R "," R "," W "," W "," R "," R "," R "," R "," W "," W "," R "," R "," R "," R "," W "," W "," R "," R "," R "," R "," R "," R "," W "," V "],
                  [" V "," W "," W "," W "," W "," W "," W "," R "," W "," W "," W "," W "," W "," R "," W "," W "," R "," W "," W "," W "," W "," W "," R "," W "," W "," W "," W "," W "," W "," V "],
                  [" V "," V "," V "," V "," V "," V "," W "," R "," W "," W "," W "," W "," W "," R "," W "," W "," R "," W "," W "," W "," W "," W "," R "," W "," V "," V "," V "," V "," V "," V "],
                  [" V "," V "," V "," V "," V "," V "," W "," R "," W "," W "," K "," R "," R "," R "," R "," R "," R "," R "," R "," K "," W "," W "," R "," W "," V "," V "," V "," V "," V "," V "],
                  [" V "," V "," V "," V "," V "," V "," W "," R "," W "," W "," R "," W "," W "," W "," D "," D "," W "," W "," W "," R "," W "," W "," R "," W "," V "," V "," V "," V "," V "," V "],
                  [" W "," W "," W "," W "," W "," W "," W "," R "," W "," W "," R "," W "," R "," R "," R "," R "," R "," R "," W "," R "," W "," W "," R "," W "," W "," W "," W "," W "," W "," W "],
                  [" W "," P "," R "," R "," R "," K "," R "," R "," R "," R "," R "," W "," K "," R "," R "," R "," R "," K "," W "," R "," R "," R "," R "," R "," K "," R "," D "," R "," S "," W "],
                  [" W "," W "," W "," W "," W "," W "," W "," R "," W "," W "," R "," W "," R "," R "," R "," R "," R "," R "," W "," R "," W "," W "," R "," W "," W "," W "," W "," W "," W "," W "],
                  [" V "," V "," V "," V "," V "," V "," W "," R "," W "," W "," R "," W "," W "," W "," W "," W "," W "," W "," W "," R "," W "," W "," R "," W "," V "," V "," V "," V "," V "," V "],
                  [" V "," V "," V "," V "," V "," V "," W "," R "," W "," W "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," W "," W "," R "," W "," V "," V "," V "," V "," V "," V "],
                  [" V "," V "," V "," V "," V "," V "," W "," R "," W "," W "," R "," W "," W "," W "," W "," W "," W "," W "," W "," R "," W "," W "," R "," W "," V "," V "," V "," V "," V "," V "],
                  [" V "," W "," W "," W "," W "," W "," W "," R "," W "," W "," K "," W "," W "," W "," W "," W "," W "," W "," W "," K "," W "," W "," R "," W "," W "," W "," W "," W "," W "," V "],
                  [" V "," W "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," W "," W "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," W "," V "],
                  [" V "," W "," R "," W "," W "," W "," W "," R "," W "," W "," W "," W "," W "," R "," W "," W "," R "," W "," W "," W "," W "," W "," R "," W "," W "," W "," W "," R "," W "," V "],
                  [" V "," W "," R "," W "," W "," W "," W "," R "," W "," W "," W "," W "," W "," R "," W "," W "," R "," W "," W "," W "," W "," W "," R "," W "," W "," W "," W "," R "," W "," V "],
                  [" V "," W "," R "," R "," K "," W "," W "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," W "," W "," K "," R "," R "," W "," V "],
                  [" V "," W "," W "," W "," R "," W "," W "," R "," W "," W "," R "," W "," W "," W "," W "," W "," W "," W "," W "," R "," W "," W "," R "," W "," W "," R "," W "," W "," W "," V "],
                  [" V "," W "," W "," W "," R "," W "," W "," R "," W "," W "," R "," W "," W "," W "," W "," W "," W "," W "," W "," R "," W "," W "," R "," W "," W "," R "," W "," W "," W "," V "],
                  [" V "," W "," R "," R "," R "," R "," R "," R "," W "," W "," R "," R "," R "," K "," W "," W "," K "," R "," R "," R "," W "," W "," R "," R "," R "," R "," R "," R "," W "," V "],
                  [" V "," W "," R "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," R "," W "," W "," R "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," R "," W "," V "],
                  [" V "," W "," K "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," R "," W "," W "," R "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," K "," W "," V "],
                  [" V "," W "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," R "," W "," V "],
                  [" V "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," W "," V "],
                  [" V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "," V "]]

    # Légende : P = Joueur │ R = Route │ K = Clé │ S = Étoile │ W = Mur │ D = Porte │ V = Vide(hors-jeu)
    maze_elements = [" P "," R "," K "," S "," W "," D "," V "]
    player_passable_boxs = [" R "," K "," S "]

    maze = [["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "],
            ["   "," ╔═","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═╕ "," ╒═","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═╗ ","   "],
            ["   "," ║ ","   ","   ","   ","   ","   ","   ","   ","   "," ⬪ ","   ","   ","   "," │ "," │ ","   ","   ","   "," ⬪ ","   ","   ","   ","   ","   ","   ","   ","   "," ║ ","   "],
            ["   "," ║ ","   "," ╭─","───","───","─╮ ","   "," ╭─","───","───","───","─╮ ","   "," │ "," │ ","   "," ╭─","───","───","───","─╮ ","   "," ╭─","───","───","─╮ ","   "," ║ ","   "],
            ["   "," ║ "," ⬪ "," │ ","   ","   "," │ ","   "," │ ","   ","   ","   "," │ ","   "," │ "," │ ","   "," │ ","   ","   ","   "," │ ","   "," │ ","   ","   "," │ "," ⬪ "," ║ ","   "],
            ["   "," ║ ","   "," ╰─","───","───","─╯ ","   "," ╰─","───","───","───","─╯ ","   "," ╰─","─╯ ","   "," ╰─","───","───","───","─╯ ","   "," ╰─","───","───","─╯ ","   "," ║ ","   "],
            ["   "," ║ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," ║ ","   "],
            ["   "," ║ ","   "," ╭─","───","───","─╮ ","   "," ╭─","─╮ ","   "," ╭─","───","───","───","───","───","───","─╮ ","   "," ╭─","─╮ ","   "," ╭─","───","───","─╮ ","   "," ║ ","   "],
            ["   "," ║ ","   "," ╰─","───","───","─╯ "," ⬪ "," │ "," │ ","   "," ╰─","───","───","─╮ "," ╭─","───","───","─╯ ","   "," │ "," │ "," ⬪ "," ╰─","───","───","─╯ ","   "," ║ ","   "],
            ["   "," ║ ","   ","   ","   ","   ","   ","   "," │ "," │ ","   ","   ","   ","   "," │ "," │ ","   ","   ","   ","   "," │ "," │ ","   ","   ","   ","   ","   ","   "," ║ ","   "],
            ["   "," ╚═","═══","═══","═══","═══","═╗ ","   "," │ "," ╰─","───","───","─╮ ","   "," │ "," │ ","   "," ╭─","───","───","─╯ "," │ ","   "," ╔═","═══","═══","═══","═══","═╝ ","   "],
            ["   ","   ","   ","   ","   ","   "," ║ ","   "," │ "," ╭─","───","───","─╯ ","   "," ╰─","─╯ ","   "," ╰─","───","───","─╮ "," │ ","   "," ║ ","   ","   ","   ","   ","   ","   "],
            ["   ","   ","   ","   ","   ","   "," ║ ","   "," │ "," │ "," ⬪ ","   ","   ","   ","   ","   ","   ","   ","   "," ⬪ "," │ "," │ ","   "," ║ ","   ","   ","   ","   ","   ","   "],
            ["   ","   ","   ","   ","   ","   "," ║ ","   "," │ "," │ ","   "," ╔═","═══","══╡","---","---","╞══","═══","═╗ ","   "," │ "," │ ","   "," ║ ","   ","   ","   ","   ","   ","   "],
            [" ╔═","═══","═══","═╧═","═══","═══","═╝ ","   "," ╰─","─╯ ","   "," ║ ","   ","   ","   ","   ","   ","   "," ║ ","   "," ╰─","─╯ ","   "," ╚═","═══","═══","═╤═","═══","═══","═╗ "],
            [" ║ "," ⓿ ","   ","   ","   "," ⬪ ","   ","   ","   ","   ","   "," ║ "," ⬪ ","   ","   ","   ","   "," ⬪ "," ║ ","   ","   ","   ","   ","   "," ⬪ ","   "," ╎ ","   "," ★ "," ║ "],
            [" ╚═","═══","═══","═╤═","═══","═══","═╗ ","   "," ╭─","─╮ ","   "," ║ ","   ","   ","   ","   ","   ","   "," ║ ","   "," ╭─","─╮ ","   "," ╔═","═══","═══","═╧═","═══","═══","═╝ "],
            ["   ","   ","   ","   ","   ","   "," ║ ","   "," │ "," │ ","   "," ╚═","═══","═══","═══","═══","═══","═══","═╝ ","   "," │ "," │ ","   "," ║ ","   ","   ","   ","   ","   ","   "],
            ["   ","   ","   ","   ","   ","   "," ║ ","   "," │ "," │ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," │ "," │ ","   "," ║ ","   ","   ","   ","   ","   ","   "],
            ["   ","   ","   ","   ","   ","   "," ║ ","   "," │ "," │ ","   "," ╭─","───","───","───","───","───","───","─╮ ","   "," │ "," │ ","   "," ║ ","   ","   ","   ","   ","   ","   "],
            ["   "," ╔═","═══","═══","═══","═══","═╝ ","   "," ╰─","─╯ "," ⬪ "," ╰─","───","───","─╮ "," ╭─","───","───","─╯ "," ⬪ "," ╰─","─╯ ","   "," ╚═","═══","═══","═══","═══","═╗ ","   "],
            ["   "," ║ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," │ "," │ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," ║ ","   "],
            ["   "," ║ ","   "," ╭─","───","───","─╮ ","   "," ╭─","───","───","───","─╮ ","   "," │ "," │ ","   "," ╭─","───","───","───","─╮ ","   "," ╭─","───","───","─╮ ","   "," ║ ","   "],
            ["   "," ║ ","   "," ╰─","───","─╮ "," │ ","   "," ╰─","───","───","───","─╯ ","   "," ╰─","─╯ ","   "," ╰─","───","───","───","─╯ ","   "," │ "," ╭─","───","─╯ ","   "," ║ ","   "],
            ["   "," ║ ","   ","   "," ⬪ "," │ "," │ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," │ "," │ "," ⬪ ","   ","   "," ║ ","   "],
            ["   "," ╙─","───","─╮ ","   "," │ "," │ ","   "," ╭─","─╮ ","   "," ╭─","───","───","───","───","───","───","─╮ ","   "," ╭─","─╮ ","   "," │ "," │ ","   "," ╭─","───","─╜ ","   "],
            ["   "," ╓─","───","─╯ ","   "," ╰─","─╯ ","   "," │ "," │ ","   "," ╰─","───","───","─╮ "," ╭─","───","───","─╯ ","   "," │ "," │ ","   "," ╰─","─╯ ","   "," ╰─","───","─╖ ","   "],
            ["   "," ║ ","   ","   ","   ","   ","   ","   "," │ "," │ ","   ","   ","   "," ⬪ "," │ "," │ "," ⬪ ","   ","   ","   "," │ "," │ ","   ","   ","   ","   ","   ","   "," ║ ","   "],
            ["   "," ║ ","   "," ╭─","───","───","───","───","─╯ "," ╰─","───","───","─╮ ","   "," │ "," │ ","   "," ╭─","───","───","─╯ "," ╰─","───","───","───","───","─╮ ","   "," ║ ","   "],
            ["   "," ║ "," ⬪ "," ╰─","───","───","───","───","───","───","───","───","─╯ ","   "," ╰─","─╯ ","   "," ╰─","───","───","───","───","───","───","───","───","─╯ "," ⬪ "," ║ ","   "],
            ["   "," ║ ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "," ║ ","   "],
            ["   "," ╚═","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═══","═╝ ","   "],
            ["   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   ","   "]]


    ## DÉFINITION DES VARIABLES DU PROGRAMME ##
    win = False
    speed = 0.01
    player_coordinates = [0,0]
    player_skin = [" ⓿ "," ❶ "," ❷ "," ❸ "," ❹ "," ❺ "," ❻ "," ❼ "," ❽ "," ❾ "," ❿ "," ⓫ "," ⓬ "," ⓭ "," ⓮ "," ⓯ "," ⓰ "," ⓱ "," ⓲ "," ⓳ "," ⓴ "," ✪ "]
    current_skin = 0
    score = 0
    double_door = False
    final_door = False


    ## AFFICHAGE DU NOM DU JEU ##
    if game_number == 1 :
        os.system("cls")
        print(game_screen_head_game_name)
        for line in range (len(game_name)) :
            line_print = ""
            for box in range (len(game_name[line])) :
                line_print += game_name[line][box]
            print("│ ",line_print, " │")
        for line in range (len(directional_keys)) :
            line_print = ""
            for box in range (len(directional_keys[line])) :
                line_print += directional_keys[line][box]
            print("│ ",line_print, " │")
        print(game_screen_foot + "\n" + " "*47 + "►", end='')
        tuto = ""
        while tuto != "Confirmer" and tuto != "Quitter" :
            tuto = get_user_input()
    
    
    ## AFFICHAGE DU TUTO ##
        if tuto == "Confirmer" :
            os.system("cls")
            print(game_screen_head_tuto)
            for line in range (len(game_tuto)) :
                line_print = ""
                for box in range (len(game_tuto[line])) :
                    line_print += game_tuto[line][box]
                print("│ ",line_print, " │")
            for line in range (len(directional_keys)) :
                line_print = ""
                for box in range (len(directional_keys[line])) :
                    line_print += directional_keys[line][box]
                print("│ ",line_print, " │")
            print(game_screen_foot + "\n" + " "*47 + "►", end='')
            start = ""
            while start != "Confirmer" :
                start = get_user_input()


    ## AFFICHAGE DE L'ÉCRAN DU DEBUT DU JEU ##
    os.system("cls")
    print(game_screen_head_before_score + "00" + game_screen_head_after_score)
    for line in range (len(ghost_maze)) :
        line_print = ""
        for box in range (len(ghost_maze[line])) :
            line_print += ghost_maze[line][box]
        print("│ ",line_print, " │")
    for line in range (len(directional_keys)) :
        line_print = ""
        for box in range (len(directional_keys[line])) :
            line_print += directional_keys[line][box]
        print("│ ",line_print, " │")
    print(game_screen_foot + "\n" + " "*47 + "►", end='')


    # JEU
    while win == False :

        # Selection du personnage
        for line in range (len(ghost_maze)) :
            for box in range (len(ghost_maze[0])) :
                if ghost_maze[line][box] == " P " :
                    player_coordinates = [line,box]
                    break
            if ghost_maze[line][box] == " P " :
                break 

        # Déplacement du personnage
        keyboard_key = get_user_input()

        # Déplacement haut
        if keyboard_key == "z" or keyboard_key == "Haut":
            if ghost_maze[player_coordinates[0]-1][player_coordinates[1]] in player_passable_boxs :
                if ghost_maze[player_coordinates[0]-1][player_coordinates[1]] == " K " :
                    score +=1
                    current_skin += 1
                elif ghost_maze[player_coordinates[0]-1][player_coordinates[1]] == " S " :
                    current_skin += 1
                    win = True
                ghost_maze[player_coordinates[0]-1][player_coordinates[1]] = " P "
                maze[player_coordinates[0]-1][player_coordinates[1]] = player_skin[current_skin]
                ghost_maze[player_coordinates[0]][player_coordinates[1]] = " R "
                maze[player_coordinates[0]][player_coordinates[1]] = "   "

        # Déplacement bas
        elif keyboard_key == "s" or keyboard_key == "Bas":
            if ghost_maze[player_coordinates[0]+1][player_coordinates[1]] in player_passable_boxs :
                if ghost_maze[player_coordinates[0]+1][player_coordinates[1]] == " K " :
                    score +=1
                    current_skin += 1
                elif ghost_maze[player_coordinates[0]+1][player_coordinates[1]] == " S " :
                    current_skin += 1
                    win = True
                ghost_maze[player_coordinates[0]+1][player_coordinates[1]] = " P "
                maze[player_coordinates[0]+1][player_coordinates[1]] = player_skin[current_skin]
                ghost_maze[player_coordinates[0]][player_coordinates[1]] = " R "
                maze[player_coordinates[0]][player_coordinates[1]] = "   "

        # Déplacement droite
        elif keyboard_key == "d" or keyboard_key == "Droite":
            if ghost_maze[player_coordinates[0]][player_coordinates[1]+1] in player_passable_boxs :
                if ghost_maze[player_coordinates[0]][player_coordinates[1]+1] == " K " :
                    score +=1
                    current_skin += 1
                elif ghost_maze[player_coordinates[0]][player_coordinates[1]+1] == " S " :
                    current_skin += 1
                    win = True
                ghost_maze[player_coordinates[0]][player_coordinates[1]+1] = " P "
                maze[player_coordinates[0]][player_coordinates[1]+1] = player_skin[current_skin]
                ghost_maze[player_coordinates[0]][player_coordinates[1]] = " R "
                maze[player_coordinates[0]][player_coordinates[1]] = "   "

        # Déplacement gauche
        elif keyboard_key == "q" or keyboard_key == "Gauche":
            if ghost_maze[player_coordinates[0]][player_coordinates[1]-1] in player_passable_boxs :
                if ghost_maze[player_coordinates[0]][player_coordinates[1]-1] == " K " :
                    score +=1
                    current_skin += 1
                elif ghost_maze[player_coordinates[0]][player_coordinates[1]-1] == " S " :
                    current_skin += 1
                    win = True
                ghost_maze[player_coordinates[0]][player_coordinates[1]-1] = " P "
                maze[player_coordinates[0]][player_coordinates[1]-1] = player_skin[current_skin]
                ghost_maze[player_coordinates[0]][player_coordinates[1]] = " R "
                maze[player_coordinates[0]][player_coordinates[1]] = "   "
        
        # Recommencer la partie
        elif keyboard_key == "Recommencer" :
            win = True
        
        # Quitter la partie
        elif keyboard_key == "Quitter" :
            win = True

        # Déplacements automatiques
        elif keyboard_key == "Auto" :
            while win == False :
                # Recherche de la clé la plus proche
                unchecked_coordinates = [[player_coordinates[0],player_coordinates[1]]]
                distance_increment = 1
                while len(unchecked_coordinates) != 0 :
                    for coordinate in range (len(unchecked_coordinates)) :
                        if distance_increment < 10 :
                            distance_increment = "00" + str(distance_increment)
                        elif distance_increment < 100 :
                            distance_increment = "0" + str(distance_increment)
                        else :
                            distance_increment = str(distance_increment)
                        tester_coordinates = [unchecked_coordinates[0][0],unchecked_coordinates[0][1]]
                        if ghost_maze[tester_coordinates[0]+1][tester_coordinates[1]] == " R " :
                            unchecked_coordinates += [[tester_coordinates[0]+1,tester_coordinates[1]]]
                            ghost_maze[tester_coordinates[0]+1][tester_coordinates[1]] = distance_increment
                            maze[tester_coordinates[0]+1][tester_coordinates[1]] = distance_increment
                        if ghost_maze[tester_coordinates[0]-1][tester_coordinates[1]] == " R " :
                            unchecked_coordinates += [[tester_coordinates[0]-1,tester_coordinates[1]]]
                            ghost_maze[tester_coordinates[0]-1][tester_coordinates[1]] = distance_increment
                            maze[tester_coordinates[0]-1][tester_coordinates[1]] = distance_increment
                        if ghost_maze[tester_coordinates[0]][tester_coordinates[1]+1] == " R " :
                            unchecked_coordinates += [[tester_coordinates[0],tester_coordinates[1]+1]]
                            ghost_maze[tester_coordinates[0]][tester_coordinates[1]+1] = distance_increment
                            maze[tester_coordinates[0]][tester_coordinates[1]+1] = distance_increment
                        if ghost_maze[tester_coordinates[0]][tester_coordinates[1]-1] == " R " :
                            unchecked_coordinates += [[tester_coordinates[0],tester_coordinates[1]-1]]
                            ghost_maze[tester_coordinates[0]][tester_coordinates[1]-1] = distance_increment
                            maze[tester_coordinates[0]][tester_coordinates[1]-1] = distance_increment
                        del(unchecked_coordinates[0])
                        distance_increment = int(distance_increment)
                        if ghost_maze[tester_coordinates[0]+1][tester_coordinates[1]] == " K " or ghost_maze[tester_coordinates[0]-1][tester_coordinates[1]] == " K " or ghost_maze[tester_coordinates[0]][tester_coordinates[1]+1] == " K " or ghost_maze[tester_coordinates[0]][tester_coordinates[1]-1] == " K " :
                            break
                        # Affichage en jeu
                        time.sleep(speed)
                        os.system("cls")
                        if score < 10 :
                            score = str(score)
                            score = "0" + score
                        else :
                            score = str(score)
                        print(game_screen_head_before_score + score[0] + score[1] + game_screen_head_after_score)
                        for line in range (len(ghost_maze)) :
                            line_print = ""
                            for box in range (len(ghost_maze[line])) :
                                line_print += ghost_maze[line][box]
                            print("│ ",line_print, " │")
                        for line in range (len(directional_keys)) :
                            line_print = ""
                            for box in range (len(directional_keys[line])) :
                                line_print += directional_keys[line][box]
                            print("│ ",line_print, " │")
                        print(game_screen_foot + "\n" + " "*47 + "►", end='')
                        score = int(score)
                    if ghost_maze[tester_coordinates[0]+1][tester_coordinates[1]] == " K " or ghost_maze[tester_coordinates[0]-1][tester_coordinates[1]] == " K " or ghost_maze[tester_coordinates[0]][tester_coordinates[1]+1] == " K " or ghost_maze[tester_coordinates[0]][tester_coordinates[1]-1] == " K " :
                            break
                    distance_increment += 1

                # Sélection de la clé la plus proche
                minimum_distance = 9999
                closer_key = [] 
                for line in range (len(ghost_maze)) :
                    for box in range (len(ghost_maze[0])) :
                        if ghost_maze[line][box] == " K " :
                            if ghost_maze[line+1][box] not in maze_elements :
                                if int(ghost_maze[line+1][box]) < minimum_distance :
                                    minimum_distance = int(ghost_maze[line+1][box])
                                    closer_key = [line,box]
                            if ghost_maze[line-1][box] not in maze_elements :
                                if int(ghost_maze[line-1][box]) < minimum_distance :
                                    minimum_distance = int(ghost_maze[line-1][box])
                                    closer_key = [line,box]
                            if ghost_maze[line][box+1] not in maze_elements :
                                if int(ghost_maze[line][box+1]) < minimum_distance :
                                    minimum_distance = int(ghost_maze[line][box+1])
                                    closer_key = [line,box]
                            if ghost_maze[line][box-1] not in maze_elements :
                                if int(ghost_maze[line][box-1]) < minimum_distance :
                                    minimum_distance = int(ghost_maze[line][box-1])
                                    closer_key = [line,box]
                        if score == 20 :
                            if ghost_maze[line][box] == " S " :
                                if ghost_maze[line+1][box] not in maze_elements :
                                    if int(ghost_maze[line+1][box]) < minimum_distance :
                                        minimum_distance = int(ghost_maze[line+1][box])
                                        closer_key = [line,box]
                                if ghost_maze[line-1][box] not in maze_elements :
                                    if int(ghost_maze[line-1][box]) < minimum_distance :
                                        minimum_distance = int(ghost_maze[line-1][box])
                                        closer_key = [line,box]
                                if ghost_maze[line][box+1] not in maze_elements :
                                    if int(ghost_maze[line][box+1]) < minimum_distance :
                                        minimum_distance = int(ghost_maze[line][box+1])
                                        closer_key = [line,box]
                                if ghost_maze[line][box-1] not in maze_elements :
                                    if int(ghost_maze[line][box-1]) < minimum_distance :
                                        minimum_distance = int(ghost_maze[line][box-1])
                                        closer_key = [line,box]

                # Stockage du chemin vers la clé la plus proche
                tester_coordinates = [closer_key[0],closer_key[1]]
                closer_way = [[closer_key[0],closer_key[1]]]
                while ghost_maze[tester_coordinates[0]][tester_coordinates[1]] != "001" :
                    distances_tester_up_down_right_left = [0,0,0,0]
                    minimum_distance = 9999
                    good_direction = ""
                    if ghost_maze[tester_coordinates[0]-1][tester_coordinates[1]] not in maze_elements :
                        distances_tester_up_down_right_left[0] = int(ghost_maze[tester_coordinates[0]-1][tester_coordinates[1]])
                    else :
                        distances_tester_up_down_right_left[0] = 99999
                    if ghost_maze[tester_coordinates[0]+1][tester_coordinates[1]] not in maze_elements :
                        distances_tester_up_down_right_left[1] = int(ghost_maze[tester_coordinates[0]+1][tester_coordinates[1]])
                    else :
                        distances_tester_up_down_right_left[1] = 99999
                    if ghost_maze[tester_coordinates[0]][tester_coordinates[1]+1] not in maze_elements :
                        distances_tester_up_down_right_left[2] = int(ghost_maze[tester_coordinates[0]][tester_coordinates[1]+1])
                    else :
                        distances_tester_up_down_right_left[2] = 99999
                    if ghost_maze[tester_coordinates[0]][tester_coordinates[1]-1] not in maze_elements :
                        distances_tester_up_down_right_left[3] = int(ghost_maze[tester_coordinates[0]][tester_coordinates[1]-1])
                    else :
                        distances_tester_up_down_right_left[3] = 99999
                    for direction in range (4) :
                        if distances_tester_up_down_right_left[direction] < minimum_distance :
                            minimum_distance = distances_tester_up_down_right_left[direction]
                            if direction == 0 :
                                good_direction = "Haut"
                            elif direction == 1 :
                                good_direction = "Bas"
                            elif direction == 2 :
                                good_direction = "Droite"
                            elif direction == 3 :
                                good_direction = "Gauche"
                    if good_direction == "Haut" :
                        closer_way += [[tester_coordinates[0]-1,tester_coordinates[1]]]
                        tester_coordinates = [tester_coordinates[0]-1,tester_coordinates[1]]
                    elif good_direction == "Bas" :
                        closer_way += [[tester_coordinates[0]+1,tester_coordinates[1]]]
                        tester_coordinates = [tester_coordinates[0]+1,tester_coordinates[1]]
                    elif good_direction == "Droite" :
                        closer_way += [[tester_coordinates[0],tester_coordinates[1]+1]]
                        tester_coordinates = [tester_coordinates[0],tester_coordinates[1]+1]
                    elif good_direction == "Gauche" :
                        closer_way += [[tester_coordinates[0],tester_coordinates[1]-1]]
                        tester_coordinates = [tester_coordinates[0],tester_coordinates[1]-1]
                closer_way += [[player_coordinates[0],player_coordinates[1]]]
                closer_way.reverse()
                
                # Suppression des chemins
                for line in range (len(ghost_maze)) :
                            for box in range (len(ghost_maze[line])) :
                                if ghost_maze[line][box] not in maze_elements :
                                    ghost_maze[line][box] = " R "
                                    maze[line][box] = "   "

                # Trajet vers la clé la plus proche
                for coordinate in range (1,len(closer_way)) :
                    if coordinate == len(closer_way)-1 :
                        score +=1
                        current_skin += 1
                    ghost_maze[closer_way[coordinate-1][0]][closer_way[coordinate-1][1]] = " R "
                    maze[closer_way[coordinate-1][0]][closer_way[coordinate-1][1]] = "   "
                    ghost_maze[closer_way[coordinate][0]][closer_way[coordinate][1]] = " P "
                    maze[closer_way[coordinate][0]][closer_way[coordinate][1]] = player_skin[current_skin]
                    player_coordinates = [closer_way[coordinate][0],closer_way[coordinate][1]]

                    # Affichage en jeu
                    time.sleep(speed)
                    os.system("cls")
                    if score < 10 :
                        score = str(score)
                        score = "0" + score
                    else :
                        score = str(score)
                    print(game_screen_head_before_score + score[0] + score[1] + game_screen_head_after_score)
                    for line in range (len(ghost_maze)) :
                        line_print = ""
                        for box in range (len(ghost_maze[line])) :
                            line_print += ghost_maze[line][box]
                        print("│ ",line_print, " │")
                    for line in range (len(directional_keys)) :
                        line_print = ""
                        for box in range (len(directional_keys[line])) :
                            line_print += directional_keys[line][box]
                        print("│ ",line_print, " │")
                    print(game_screen_foot + "\n" + " "*47 + "►", end='')
                    score = int(score)
            
                # Ouverture des portes et fin du jeu
                if score == 10 and double_door == False:
                    double_door = True
                    ghost_maze[13][14] = " R "
                    maze[13][14] = "   "
                    ghost_maze[13][15] = " R "
                    maze[13][15] = "   "
                if score == 20 and final_door == False:
                    final_door = True
                    ghost_maze[15][26] = " R "
                    maze[14][26] = "═╧═"
                    maze[15][26] = "   "
                    maze[16][26] = "═╤═"
                if score == 21 :
                    win = True

        # Ouverture des portes
        if score == 10 and double_door == False:
            double_door = True
            ghost_maze[13][14] = " R "
            maze[13][14] = "   "
            ghost_maze[13][15] = " R "
            maze[13][15] = "   "
        if score == 20 and final_door == False:
            final_door = True
            ghost_maze[15][26] = " R "
            maze[14][26] = "═╧═"
            maze[15][26] = "   "
            maze[16][26] = "═╤═"

        # Affichage en jeu
        if win == False :
            os.system("cls")
            if score < 10 :
                score = str(score)
                score = "0" + score
            else :
                score = str(score)
            print(game_screen_head_before_score + score[0] + score[1] + game_screen_head_after_score)
            for line in range (len(ghost_maze)) :
                line_print = ""
                for box in range (len(ghost_maze[line])) :
                    line_print += ghost_maze[line][box]
                print("│ ",line_print, " │")
            for line in range (len(directional_keys)) :
                line_print = ""
                for box in range (len(directional_keys[line])) :
                    line_print += directional_keys[line][box]
                print("│ ",line_print, " │")
            print(game_screen_foot + "\n" + " "*47 + "►", end='')
            score = int(score)

    # Affichage écran de victoire
    if keyboard_key != "Recommencer" and keyboard_key != "Quitter" :
        os.system("cls")
        print(game_screen_head_win)
        for line in range (len(game_win)) :
            line_print = ""
            for box in range (len(game_win[line])) :
                line_print += game_win[line][box]
            print("│ ",line_print, " │")
        for line in range (len(directional_keys)) :
            line_print = ""
            for box in range (len(directional_keys[line])) :
                line_print += directional_keys[line][box]
            print("│ ",line_print, " │")
        print(game_screen_foot + "\n" + " "*47 + "►", end='')
        keyboard_key = ""
        while keyboard_key != "Confirmer" and keyboard_key != "Recommencer" and keyboard_key != "Quitter" :
            keyboard_key = get_user_input()

# Affichage écran de remerciment
os.system("cls")
print(game_screen_head_thanks)
for line in range (len(game_name)) :
    line_print = ""
    for box in range (len(game_name[line])) :
        line_print += game_name[line][box]
    print("│ ",line_print, " │")
for line in range (len(directional_keys)) :
    line_print = ""
    for box in range (len(directional_keys[line])) :
        line_print += directional_keys[line][box]
    print("│ ",line_print, " │")
print(game_screen_foot)



# Développer par Nicolas Coquatrix